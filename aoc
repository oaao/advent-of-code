#!/bin/bash
# this could be loads nicer but i just need it to do THE THING

# ENSURE files can't be overwritten with > (only >|)
# i always have this on, but hey just in case i get a lobotomy sometime!!!!
set -o noclobber

# validator constants -------------------------------------------------------------------
WORKTREE_BASE="$(git rev-parse --show-toplevel)"
VALID_YEARS=($(seq 2015 1 $(date +"%Y")))
VALID_ACTIONS=("init" "git" "next")
declare -A VALID_LANGS=(
	["go"]="go"
	["haskell"]="hs"
	["kotlin"]="kt"
	["python"]="py"
	["ruby"]="rb"
	["rust"]="rs"
	["scala"]="scala"
	["typescript"]="ts"
)

# arg processing ------------------------------------------------------------------------
ACTION=${1:-"undefined"}
shift
PARAMS=(${@})

# function definitions - GENERAL --------------------------------------------------------
function validate_membership {
	INPUT=$1; PRETTY=$2; shift 2; ARRAY=$@
	if [[ ! "${ARRAY[*]}" =~ "${INPUT}" ]]; then
		echo "Invalid ${PRETTY}: ${INPUT}"
		echo "Valid ${PRETTY}s are: [ $(echo "$ARRAY" | tr ' ' '\n' | sort | tr '\n' ' ')]"
		exit 1
	fi
}

# function definitions - HELPERS - init -------------------------------------------------
function get_template_for_lang {
	AOC_LANG=$1 YEAR=$2 DAY=$3
	CONTENT="EXERCISE PROMPT: http://adventofcode.com/${YEAR}/day/$(sed 's/^0*//' <<< $DAY)"
	case $AOC_LANG in
		python)
			printf '"""\n'"${CONTENT}"'\n"""\n'
			;;
		scala|rust|typescript|go|kotlin)
			printf "// ${CONTENT}\n"
			;;
		haskell)
			printf "-- ${CONTENT}\n"
			;;
		ruby)
			printf "# ${CONTENT}\n"
			;;
	esac
}

function generate_for_language {
	AOC_LANG=$1 YEAR=$2 FROM_DAY=${3:-"1"} TO_DAY=${4:-"31"}
	for DAY in $(seq -f "%02g" "$FROM_DAY" "$TO_DAY")
	do
		DAY_PATH="${WORKTREE_BASE}/${AOC_LANG}/${YEAR}/${DAY}"
		mkdir -pv $DAY_PATH
		touch "${DAY_PATH}/input"
		touch "${DAY_PATH}/sample"
		get_template_for_lang $AOC_LANG $YEAR $DAY > "$DAY_PATH/$DAY.${VALID_LANGS[${AOC_LANG}]}"
	done
}


# function definitions - ACTIONS --------------------------------------------------------
CURRENT_DIR="$(pwd)"
SUBPATH="${CURRENT_DIR#"$WORKTREE_BASE"}"
SUBPATH_ARR=(${SUBPATH//"/"/" "})

CURRENT_AOC_LANG=${SUBPATH_ARR[0]}
CURRENT_YEAR=${SUBPATH_ARR[1]}
CURRENT_DAY=${SUBPATH_ARR[2]}

function action_init {
	AOC_LANG="${PARAMS[0]}"
	YEAR="${PARAMS[1]}"
	START_DAY="${PARAMS[2]}"
	END_DAY="${PARAMS[3]}"
	[[ $ACTION == "init" ]] && [[ ! "(2 4)" =~ ${#PARAMS[@]} ]] && { printf "Try:\n  aoc init {lang} {year} [from_day:1] [to_day:31]\n"; exit 1; }
	validate_membership $AOC_LANG "language" ${!VALID_LANGS[@]}
	validate_membership $YEAR "year" ${VALID_YEARS[*]}
	generate_for_language $AOC_LANG $YEAR $START_DAY $END_DAY
	echo "Finished generating for: [ $AOC_LANG @ $YEAR ]"
}

function action_git {
	PSEUDOGIT="${PARAMS[0]}"
	COMMENT="${PARAMS[@]:1}"
	[[ $ACTION == "git" ]] && [[ ! "(1 2)" =~ ${#PARAMS[@]} ]] && { printf "Try:\n  aoc git {add|*} {comment}\n"; exit 1; }
	case $PSEUDOGIT in
		"add")
			SYMBOL="+";;
		*)
			SYMBOL="Δ";;
	esac
	MSG="${SYMBOL} [${CURRENT_YEAR}, ${CURRENT_DAY}] ${VALID_LANGS[${CURRENT_AOC_LANG}]} — ${COMMENT}"
	git add . && git commit -m "$MSG"
}

function action_next {
	NEXT_DAY="$(printf "%02d" $(("$CURRENT_DAY" + 1)))"
	[[ ! -z $CURRENT_AOC_LANG ]] && [[ ! -z $CURRENT_YEAR ]] && [[ ! -z $CURRENT_DAY ]] \
	&& generate_for_language "$CURRENT_AOC_LANG" "$CURRENT_YEAR" "$NEXT_DAY" "$NEXT_DAY" \
	|| echo "Could not determine current place in subpath: ${SUBPATH:-"./"}"
	# requires {aoc} to be run as {. aoc}
	cd "${WORKTREE_BASE}/${CURRENT_AOC_LANG}/${CURRENT_YEAR}/${NEXT_DAY}"

}


# execution  ----------------------------------------------------------------------------
validate_membership $ACTION "action" ${VALID_ACTIONS[*]}
$"action_${ACTION}"
