#!/bin/bash
# this could be loads nicer but i just need it to do THE THING

# ENSURE files can't be overwritten with > (only >|)
# i always have this on, but hey just in case i get a lobotomy sometime!!!!
set -o noclobber

# validator constants -------------------------------------------------------------------
WORKTREE_BASE="$(git rev-parse --show-toplevel)"
VALID_YEARS=($(seq 2015 1 $(date +"%Y")))
VALID_ACTIONS=("init" "git")
declare -A VALID_LANGS=(
	["go"]="go"
	["haskell"]="hs"
	["kotlin"]="kt"
	["python"]="py"
	["ruby"]="rb"
	["rust"]="rs"
	["scala"]="scala"
	["typescript"]="ts"
)

# arg processing ------------------------------------------------------------------------
ACTION=${1:-"undefined"}
shift
PARAMS=(${@})

# function definitions - GENERAL --------------------------------------------------------
function validate_membership {
	INPUT=$1; PRETTY=$2; shift 2; ARRAY=$@
	if [[ ! "${ARRAY[*]}" =~ "${INPUT}" ]]; then
		echo "Invalid ${PRETTY}: ${INPUT}"
		echo "Valid ${PRETTY}s are: [ $(echo "$ARRAY" | tr ' ' '\n' | sort | tr '\n' ' ')]"
		exit 1
	fi
}

# function definitions - HELPERS - init -------------------------------------------------
function get_template_for_lang {
	LANG=$1 YEAR=$2 DAY=$3
	CONTENT="EXERCISE PROMPT: http://adventofcode.com/${YEAR}/day/$(sed 's/^0*//' <<< $DAY)"
	case $LANG in
		python)
			printf '"""\n'"${CONTENT}"'\n"""\n'
			;;
		scala|rust|typescript|go|kotlin)
			printf "// ${CONTENT}\n"
			;;
		haskell)
			printf "-- ${CONTENT}\n"
			;;
		ruby)
			printf "# ${CONTENT}\n"
			;;
	esac
}

function generate_for_language {
	LANG=$1 YEAR=$2 DAY_LIMIT=${3:-"31"}
	for DAY in $(seq -f "%02g" 01 "$DAY_LIMIT")
	do
		DAY_PATH="${WORKTREE_BASE}/${LANG}/${YEAR}/${DAY}"
		mkdir -pv $DAY_PATH
		touch "${DAY_PATH}/input"
		get_template_for_lang $LANG $YEAR $DAY > "$DAY_PATH/$DAY.${VALID_LANGS[${LANG}]}"
	done
}


# function definitions - ACTIONS --------------------------------------------------------
function action_init {
	LANG="${PARAMS[0]}"
	YEAR="${PARAMS[1]}"
	DAY_LIMIT="${PARAMS[2]}"
	[[ $ACTION == "init" ]] && [[ ! "(2 3)" =~ ${#PARAMS[@]} ]] && { printf "Try:\n  aoc init {lang} {year} [day_limit:31]\n"; exit 1; }
	validate_membership $LANG "language" ${!VALID_LANGS[@]}
	validate_membership $YEAR "year" ${VALID_YEARS[*]}
	generate_for_language $LANG $YEAR $DAY_LIMIT
	echo "Finished generating for: [ $LANG @ $YEAR ]"
}

function action_git {
	PSEUDOGIT="${PARAMS[0]}"
	COMMENT="${PARAMS[@]:1}"
	[[ $ACTION == "git" ]] && [[ ! "(1 2)" =~ ${#PARAMS[@]} ]] && { printf "Try:\n  aoc git {add|*} {comment}\n"; exit 1; }
	case $PSEUDOGIT in
		"add")
			SYMBOL="+";;
		*)
			SYMBOL="Δ";;
	esac
	CURRENT_DIR="$(pwd)"
	SUBPATH="${CURRENT_DIR#"$WORKTREE_BASE"}"
	ARR=(${SUBPATH//"/"/" "})
	MSG="${SYMBOL} [${ARR[1]}, ${ARR[2]}] ${VALID_LANGS[${ARR[0]}]} — ${COMMENT}"
	git add . && git commit -m "$MSG"
}


# execution  ----------------------------------------------------------------------------
validate_membership $ACTION "action" ${VALID_ACTIONS[*]}
$"action_${ACTION}"
